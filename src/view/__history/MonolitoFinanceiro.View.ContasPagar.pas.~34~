unit MonolitoFinanceiro.View.ContasPagar;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, MonolitoFinanceiro.View.CadastroPadrao,
  Data.DB, System.ImageList, Vcl.ImgList, Vcl.Grids, Vcl.DBGrids, Vcl.StdCtrls,
  Vcl.ExtCtrls, Vcl.WinXPanels, Vcl.ComCtrls;

type
  TfrmContasPagar = class(TfrmCadastroPadrao)
    DBGrid2: TDBGrid;
    pnlDetalhes: TPanel;
    DataSource2: TDataSource;
    pnlParcelas: TPanel;
    DBGrid3: TDBGrid;
    Panel2: TPanel;
    lblValorCompra: TLabel;
    edtValorCompra: TEdit;
    lblDesconto: TLabel;
    edtDesconto: TEdit;
    lblDetalhes: TLabel;
    edtDetalhes: TEdit;
    dtpDataCompra: TDateTimePicker;
    lblDataCompra: TLabel;
    RadioGroup: TRadioGroup;
    lblNDocumento: TLabel;
    Panel3: TPanel;
    Panel4: TPanel;
    Panel5: TPanel;
    edtNDocumento: TEdit;
    lblQTDParcelas: TLabel;
    dtpDataVencimento: TDateTimePicker;
    lblDataVencimento: TLabel;
    cbParcelas: TComboBox;
    Panel6: TPanel;
    lblValorParcela: TLabel;
    Panel7: TPanel;
    lblParcela: TLabel;
    Label2: TLabel;
    lblQtdPrarcelasValor: TLabel;
    btnGerarParcelas: TButton;
    Panel8: TPanel;
    Label3: TLabel;
    Label4: TLabel;
    procedure FormShow(Sender: TObject);
    procedure btnSalvarClick(Sender: TObject);
    procedure btnGerarParcelasClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmContasPagar: TfrmContasPagar;

implementation

{$R *.dfm}

uses MonolitoFinanceiro.Model.ContasPagar, MonolitoFinanceiro.Utilitarios,
  MonolitoFinanceiro.Model.Usuario;

procedure TfrmContasPagar.btnSalvarClick(Sender: TObject);
var
  LMeio : String;
  LStatus : String;
  valor_total, valor_desconto, valor_parcela: Double;
  numero_parcelas, i: Integer;
  data_vencimento: TDate;
begin
  if Trim(edtNDocumento.Text) = '' then
  begin
    edtNDocumento.SetFocus;
    Application.MessageBox('O Campo Numero do documento não pode ser vazio', 'Atenção', MB_OK + MB_ICONWARNING);
    Abort;
  end;

  if Trim(edtValorCompra.Text) = '' then
  begin
    edtValorCompra.SetFocus;
    Application.MessageBox('O Campo Valo da compra não pode ser vazio', 'Atenção', MB_OK + MB_ICONWARNING);
    Abort;
  end;

  if Trim(edtDesconto.Text) = '' then
  begin
    edtDesconto.SetFocus;
    Application.MessageBox('O Campo Desconto não pode ser vazio', 'Atenção', MB_OK + MB_ICONWARNING);
    Abort;
  end;

  if Trim(edtDetalhes.Text) = '' then
  begin
    edtDetalhes.SetFocus;
    Application.MessageBox('O Campo Detalhes não pode ser vazio', 'Atenção', MB_OK + MB_ICONWARNING);
    Abort;
  end;

  valor_total := StrToFloat(edtValorCompra.Text);
  valor_desconto := StrToFloat(edtDesconto.Text);

  if RadioGroup.ItemIndex = 0 then
  begin
    numero_parcelas := 1;
  end
  else
  begin
    numero_parcelas := StrToInt(cbParcelas.Text);
  end;

  valor_total := valor_total - valor_desconto;
  valor_parcela := valor_total / numero_parcelas;
  data_vencimento := dtpDataVencimento.Date;
  lblValorParcela.Caption := TUtilitarios.FormatoMoeda(valor_parcela);
  lblQtdPrarcelasValor.Caption := IntToStr(numero_parcelas) + 'x';

  dmContasPagar.cdsContasPagar.DisableControls;
  try
    dmContasPagar.cdsContasPagar.EmptyDataSet;

    for i := 1 to numero_parcelas do
    begin
      dmContasPagar.cdsContasPagar.Append;
      dmContasPagar.cdsContasPagar.FieldByName('id').AsString := TUtilitarios.GetID;
      dmContasPagar.cdsContasPagar.FieldByName('id_conta_pagar').AsString := dmContasPagar.cdsContasPagar.FieldByName('id').AsString;
      dmContasPagar.cdsContasPagar.FieldByName('data_vencimento').AsDateTime := data_vencimento;
      dmContasPagar.cdsContasPagar.FieldByName('valor').AsBCD := valor_parcela;
      dmContasPagar.cdsContasPagar.Post;
      data_vencimento := IncMonth(data_vencimento, 1);
    end;
  finally
    dmContasPagar.cdsContasPagar.EnableControls;
  end;

  LStatus := 'A';

  case RadioGroup.ItemIndex of
    0: LMeio := 'A';
    1: LMeio := 'C';
    2: LMeio := 'D';
  end;

  dmContasPagar.cdsContasPagar.ApplyUpdates(0);

  dmContasPagar.cdsContasPagarnumero_documento.AsString := Trim(edtNDocumento.Text);
  dmContasPagar.cdsContasPagarvalor_compra.AsString := Trim(edtValorCompra.Text);
  dmContasPagar.cdsContasPagarvalor_abatido.AsString := Trim(edtDesconto.Text);
  dmContasPagar.cdsContasPagarDetalhedetalhes.AsString := Trim(edtDetalhes.Text);
  dmContasPagar.cdsContasPagardata_compra.AsDateTime := dtpDataCompra.Date;
  dmContasPagar.cdsContasPagarDetalheid.AsString := TUtilitarios.GetID;
  dmContasPagar.cdsContasPagarDetalheid := dmContasPagar.cdsContasPagarDetalheid_conta_pagar;
  dmContasPagar.cdsContasPagarDetalheUsuario.AsString := dmUsuarios.GetUsuarioLogado.Nome;
  dmContasPagar.cdsContasPagarData_cadastro.AsDateTime := Now;
  dmContasPagar.cdsContasPagarDetalheStatus.AsString := LStatus;

  inherited;
end;


procedure TfrmContasPagar.btnGerarParcelasClick(Sender: TObject);
var
  valor_total, valor_desconto, valor_parcela: Double;
  numero_parcelas, i: Integer;
  data_vencimento: TDate;
begin
  valor_total := StrToFloat(edtValorCompra.Text);
  valor_desconto := StrToFloat(edtDesconto.Text);

  if RadioGroup.ItemIndex = 0 then
  begin
    numero_parcelas := 1;
  end
  else
  begin
    numero_parcelas := StrToInt(cbParcelas.Text);
  end;

  valor_total := valor_total - valor_desconto;
  valor_parcela := valor_total / numero_parcelas;
  data_vencimento := dtpDataVencimento.Date;
  lblValorParcela.Caption := TUtilitarios.FormatoMoeda(valor_parcela);
  lblQtdPrarcelasValor.Caption := IntToStr(numero_parcelas) + 'x';

  dmContasPagar.cdsContasPagar.DisableControls;
  try
    dmContasPagar.cdsContasPagar.EmptyDataSet;

    for i := 1 to numero_parcelas do
    begin
      dmContasPagar.cdsContasPagar.Append;
      dmContasPagar.cdsContasPagar.FieldByName('id').AsString := TUtilitarios.GetID;
      dmContasPagar.cdsContasPagar.FieldByName('id_conta_pagar').AsString := dmContasPagar.cdsContasPagar.FieldByName('id').AsString;
      dmContasPagar.cdsContasPagar.FieldByName('data_vencimento').AsDateTime := data_vencimento;
      dmContasPagar.cdsContasPagar.FieldByName('valor').AsBCD := valor_parcela;
      dmContasPagar.cdsContasPagar.Post;
      data_vencimento := IncMonth(data_vencimento, 1);
    end;
  finally
    dmContasPagar.cdsContasPagar.EnableControls;
  end;
end;


procedure TfrmContasPagar.FormShow(Sender: TObject);
begin
  inherited;
   Application.CreateForm(TdmContasPagar, dmContasPagar);
   dtpDataCompra.Date := now;
   dtpDataVencimento.Date := now + 30;
end;

end.
